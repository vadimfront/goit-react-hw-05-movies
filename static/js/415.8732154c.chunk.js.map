{"version":3,"file":"static/js/415.8732154c.chunk.js","mappings":"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","sources":["components/MovieSearch/MovieSearch.styled.jsx","components/MovieSearch/MovieSearch.jsx","components/MovieSearchResults/MovieSearchResults.jsx","Pages/Movies/Movies.jsx","components/MovieCards/MovieCard.styled.jsx","components/MovieCards/MovieCards.jsx"],"sourcesContent":["import { styled } from 'styled-components';\n\nconst FormMovies = styled.form`\n  padding: 25px 0;\n`;\nconst SearchInput = styled.input``;\nconst BtnSubmit = styled.button``;\n\nexport { FormMovies, SearchInput, BtnSubmit };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { BtnSubmit, FormMovies, SearchInput } from './MovieSearch.styled';\nimport { Container } from 'components/Container/Container';\n\nexport const MovieSearch = ({ setSearchTerm }) => {\n  const sumbimHandler = e => {\n    e.preventDefault();\n    const { searchMovies } = Object.fromEntries(new FormData(e.currentTarget));\n    if (!searchMovies.trim().length) return;\n    setSearchTerm(searchMovies);\n  };\n\n  return (\n    <Container>\n      <FormMovies onSubmit={sumbimHandler}>\n        <SearchInput\n          type=\"search\"\n          placeholder=\"Movies searching\"\n          name=\"searchMovies\"\n        />\n        <BtnSubmit type=\"submit\">Search</BtnSubmit>\n      </FormMovies>\n    </Container>\n  );\n};\n\nMovieSearch.propTypes = {\n  setSearchTerm: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { MovieCards } from 'components/MovieCards/MovieCards';\nimport { useLocation } from 'react-router-dom';\n\nexport const MovieSearchResults = ({ moviesdata }) => {\n  const location = useLocation();\n  const movieList = moviesdata.results ?? [];\n  return <MovieCards moviesData={movieList} location={location} />;\n};\n\nMovieSearchResults.propTypes = {\n  moviesdata: PropTypes.shape({\n    page: PropTypes.number,\n    results: PropTypes.arrayOf(\n      PropTypes.shape({\n        adult: PropTypes.bool,\n        backdrop_path: PropTypes.string,\n        genre_ids: PropTypes.array,\n        id: PropTypes.number,\n        media_type: PropTypes.string,\n        original_language: PropTypes.string,\n        original_title: PropTypes.string,\n        overview: PropTypes.string,\n        popularity: PropTypes.number,\n        poster_path: PropTypes.string,\n        release_date: PropTypes.string,\n        title: PropTypes.string,\n        video: PropTypes.bool,\n        vote_average: PropTypes.number,\n        vote_count: PropTypes.number,\n      })\n    ).isRequired,\n    total_pages: PropTypes.number,\n    total_results: PropTypes.number,\n  }).isRequired,\n};\n","import React, { useEffect, useState } from 'react';\nimport { useFetch } from 'hooks/useFetch';\nimport { MovieSearch } from 'components/MovieSearch/MovieSearch';\nimport { MovieSearchResults } from 'components/MovieSearchResults/MovieSearchResults';\nimport { Spinner } from 'components/Spinner/Spinner';\nimport { ErrorMessage } from 'components/ErrorMessage/ErrorMessage';\nimport { useSearchParams } from 'react-router-dom';\nimport { isEmptyObject } from 'helpers/helpers';\n\nconst Movies = () => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query');\n\n  const { loading, data, error } = useFetch(\n    query && `search/movie?query=${query}&include_adult=false&page=1`\n  );\n\n  useEffect(() => {\n    if (searchTerm.length) setSearchParams({ query: searchTerm });\n  }, [searchTerm, setSearchParams]);\n\n  return (\n    <>\n      {loading && <Spinner />}\n      {error && <ErrorMessage />}\n      <MovieSearch setSearchTerm={setSearchTerm} />\n      {!isEmptyObject(data) ? <MovieSearchResults moviesdata={data} /> : null}\n    </>\n  );\n};\n\nexport default Movies;\n","import { styled } from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nconst CardList = styled.ul`\n  display: flex;\n  gap: 15px;\n  flex-wrap: wrap;\n  list-style: none;\n`;\n\nconst CardContent = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  gap: 10px;\n  padding: 10px;\n  color: #e8e8e8;\n  line-height: 1.5;\n  border-radius: 5px;\n  opacity: 0;\n  pointer-events: none;\n  transform: translateY(50px);\n  transition: all 0.6s cubic-bezier(0.23, 1, 0.32, 1);\n`;\n\nconst CardPoster = styled.img`\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n  transition: filter 0.6s cubic-bezier(0.23, 1, 0.32, 1);\n`;\n\nconst CardItem = styled.li`\n  flex-basis: 100%;\n  &:hover ${CardContent} {\n    opacity: 1;\n    transform: translateY(0);\n  }\n  &:hover ${CardPoster} {\n    filter: blur(5px) brightness(50%);\n  }\n\n  @media (min-width: 768px) {\n    flex-basis: calc((100% - 30px) / 3);\n  }\n  @media (min-width: 1024px) {\n    flex-basis: calc((100% - 45px) / 4);\n  }\n`;\n\nconst CardLink = styled(Link)`\n  position: relative;\n  display: block;\n  width: 100%;\n  height: 100%;\n`;\n\nconst CardTitle = styled.p`\n  font-size: 24px;\n  font-weight: 700;\n`;\n\nconst CardDescription = styled.p``;\n\nexport {\n  CardList,\n  CardItem,\n  CardPoster,\n  CardContent,\n  CardTitle,\n  CardDescription,\n  CardLink,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport noImage from '../../assets/image-not-found.jpg';\nimport { Container } from 'components/Container/Container';\nimport {\n  CardContent,\n  CardDescription,\n  CardItem,\n  CardLink,\n  CardList,\n  CardPoster,\n  CardTitle,\n} from './MovieCard.styled';\nimport { truncateText } from 'helpers/helpers';\n\nexport const MovieCards = ({ moviesData, location }) => {\n  return (\n    <Container>\n      <CardList>\n        {moviesData.map(({ id, title, name, poster_path, overview }) => (\n          <CardItem key={id}>\n            <CardLink to={`/movies/${id}`} state={{ form: location }}>\n              <CardPoster\n                src={\n                  poster_path\n                    ? `https://image.tmdb.org/t/p/w400/${poster_path}`\n                    : noImage\n                }\n                alt={title ?? name}\n              />\n              <CardContent>\n                <CardTitle>{title ?? name}</CardTitle>\n                <CardDescription>{truncateText(150, overview)}</CardDescription>\n              </CardContent>\n            </CardLink>\n          </CardItem>\n        ))}\n      </CardList>\n    </Container>\n  );\n};\n\nMovieCards.propTypes = {\n  moviesData: PropTypes.arrayOf(\n    PropTypes.shape({\n      adult: PropTypes.bool,\n      backdrop_path: PropTypes.string,\n      genre_ids: PropTypes.array,\n      id: PropTypes.number,\n      media_type: PropTypes.string,\n      original_language: PropTypes.string,\n      original_title: PropTypes.string,\n      overview: PropTypes.string,\n      popularity: PropTypes.number,\n      poster_path: PropTypes.string,\n      release_date: PropTypes.string,\n      title: PropTypes.string,\n      video: PropTypes.bool,\n      vote_average: PropTypes.number,\n      vote_count: PropTypes.number,\n    }).isRequired\n  ),\n  location: PropTypes.object.isRequired,\n};\n"],"names":["FormMovies","styled","_templateObject","_taggedTemplateLiteral","SearchInput","_templateObject2","BtnSubmit","_templateObject3","MovieSearch","_ref","setSearchTerm","_jsx","Container","children","_jsxs","onSubmit","e","preventDefault","searchMovies","Object","fromEntries","FormData","currentTarget","trim","length","type","placeholder","name","MovieSearchResults","_moviesdata$results","moviesdata","location","useLocation","movieList","results","MovieCards","moviesData","_useState","useState","_useState2","_slicedToArray","searchTerm","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","setSearchParams","query","get","_useFetch","useFetch","concat","loading","data","error","useEffect","_Fragment","Spinner","ErrorMessage","isEmptyObject","CardList","CardContent","CardPoster","CardItem","_templateObject4","CardLink","Link","_templateObject5","CardTitle","_templateObject6","CardDescription","_templateObject7","map","_ref2","id","title","poster_path","overview","to","state","form","src","noImage","alt","truncateText"],"sourceRoot":""}