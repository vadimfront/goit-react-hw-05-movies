{"version":3,"file":"static/js/576.1c14098b.chunk.js","mappings":"4OAEMA,EAAOC,EAAAA,OAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,mFAOhBC,EAAOH,EAAAA,OAAAA,GAASI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,QAEhBG,EAAQL,EAAAA,OAAAA,IAAUM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,+C,SCNXK,EAAW,SAAHC,GAAkC,IAA5BC,EAAQD,EAARC,SAAUC,EAAUF,EAAVE,WAC3BC,EAASF,EAATE,KACFC,EAAcD,EAAKE,MAAM,EAAGH,GAClC,OACEI,EAAAA,EAAAA,KAACf,EAAI,CAAAgB,SACFJ,EAAKK,OACFJ,EAAYK,KAAI,SAAAC,GAAA,IAAGC,EAAED,EAAFC,GAAIC,EAAIF,EAAJE,KAAMC,EAAYH,EAAZG,aAAY,OACvCC,EAAAA,EAAAA,MAACnB,EAAI,CAAAY,SAAA,EACHD,EAAAA,EAAAA,KAAA,KAAAC,SAAIK,KACJN,EAAAA,EAAAA,KAACT,EAAK,CACJkB,IACEF,EAAY,mCAAAG,OAC2BH,GACnCI,EAENC,IAAKN,MARED,EAUJ,IAET,oBAGV,E,4CCzBMQ,EAAM3B,EAAAA,OAAAA,OAAaC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,6ICCZ0B,EAAS,SAAHpB,GAAoC,IAA9BqB,EAAYrB,EAAZqB,aAAcd,EAAQP,EAARO,SACrC,OAAOD,EAAAA,EAAAA,KAACa,EAAG,CAACG,QAASD,EAAad,SAAEA,GACtC,ECkCA,EA9Ba,WACX,IAAQgB,GAAYC,EAAAA,EAAAA,MAAZD,QACRE,GAAiCC,EAAAA,EAAAA,GAAS,UAADV,OAAWO,EAAO,aAAnDI,EAAOF,EAAPE,QAASC,EAAIH,EAAJG,KAAMC,EAAKJ,EAALI,MACvBC,GAAoCC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAzC5B,EAAU8B,EAAA,GAAEE,EAAaF,EAAA,GAahC,OACElB,EAAAA,EAAAA,MAAAqB,EAAAA,SAAA,CAAA5B,SAAA,CACGoB,IAAWrB,EAAAA,EAAAA,KAAC8B,EAAAA,EAAO,MACjBT,GAAWE,MAAWQ,EAAAA,EAAAA,GAAcT,KACrCtB,EAAAA,EAAAA,KAACP,EAAQ,CAACE,SAAU2B,EAAM1B,WAAYA,MAEtCmC,EAAAA,EAAAA,GAAcT,IAbI,WACtB,IACMU,EADWV,EAATzB,KACcK,OACtB,QAAIN,EAAaoC,EAEnB,CAQ6BC,KACvBjC,EAAAA,EAAAA,KAACc,EAAM,CAACC,aAlBO,WACnBa,GAAc,SAAAM,GAAS,OAAIA,EAAY,EAAE,GAC3C,EAgByCjC,SAAC,cAErCsB,IAASvB,EAAAA,EAAAA,KAACmC,EAAAA,EAAY,CAACC,aAAa,2BAG3C,C","sources":["components/CastList/CastList.styled.jsx","components/CastList/CastList.jsx","components/Button/Button.styles.jsx","components/Button/Button.jsx","components/Cast/Cast.jsx"],"sourcesContent":["import { styled } from 'styled-components';\n\nconst List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 15px;\n  list-style: none;\n`;\n\nconst Item = styled.li``;\n\nconst Photo = styled.img`\n  width: 100%;\n  max-width: 200px;\n`;\n\nexport { List, Item, Photo };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport noImage from '../../assets/image-not-found.jpg';\nimport { Photo, Item, List } from './CastList.styled';\n\nexport const CastList = ({ castData, elemToLoad }) => {\n  const { cast } = castData;\n  const slicedItems = cast.slice(0, elemToLoad);\n  return (\n    <List>\n      {cast.length\n        ? slicedItems.map(({ id, name, profile_path }) => (\n            <Item key={id}>\n              <p>{name}</p>\n              <Photo\n                src={\n                  profile_path\n                    ? `https://image.tmdb.org/t/p/w200/${profile_path}`\n                    : noImage\n                }\n                alt={name}\n              />\n            </Item>\n          ))\n        : 'There is no cast'}\n    </List>\n  );\n};\n\nCastList.propTypes = {\n  castData: PropTypes.shape({\n    cast: PropTypes.array,\n    crew: PropTypes.array,\n    id: PropTypes.number,\n  }).isRequired,\n  elemToLoad: PropTypes.number,\n};\n","import { styled } from 'styled-components';\n\nconst Btn = styled.button`\n  background-color: #49b0f9;\n  border: navajowhite;\n  border-radius: 6px;\n  padding: 10px;\n  color: #fff;\n  cursor: pointer;\n`;\n\nexport { Btn };\n","import React from 'react';\nimport { Btn } from './Button.styles';\n\nexport const Button = ({ clickHandler, children }) => {\n  return <Btn onClick={clickHandler}>{children}</Btn>;\n};\n","import React, { useState } from 'react';\nimport { CastList } from 'components/CastList/CastList';\nimport { ErrorMessage } from 'components/ErrorMessage/ErrorMessage';\nimport { Spinner } from 'components/Spinner/Spinner';\nimport { isEmptyObject } from 'helpers/helpers';\nimport { useFetch } from 'hooks/useFetch';\nimport { useParams } from 'react-router-dom';\nimport { Button } from 'components/Button/Button';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const { loading, data, error } = useFetch(`/movie/${movieId}/credits`);\n  const [elemToLoad, setElemToLoad] = useState(10);\n\n  const clickHandler = () => {\n    setElemToLoad(prevState => prevState + 10);\n  };\n\n  const isElementToLoad = () => {\n    const { cast } = data;\n    const maxItems = cast.length;\n    if (elemToLoad > maxItems) return false;\n    return true;\n  };\n\n  return (\n    <>\n      {loading && <Spinner />}\n      {!(loading && error) && !isEmptyObject(data) && (\n        <CastList castData={data} elemToLoad={elemToLoad} />\n      )}\n      {!isEmptyObject(data) && isElementToLoad() && (\n        <Button clickHandler={clickHandler}>Load More</Button>\n      )}\n      {error && <ErrorMessage errorMessage=\"Something went wrong\" />}\n    </>\n  );\n};\n\nexport default Cast;\n"],"names":["List","styled","_templateObject","_taggedTemplateLiteral","Item","_templateObject2","Photo","_templateObject3","CastList","_ref","castData","elemToLoad","cast","slicedItems","slice","_jsx","children","length","map","_ref2","id","name","profile_path","_jsxs","src","concat","noImage","alt","Btn","Button","clickHandler","onClick","movieId","useParams","_useFetch","useFetch","loading","data","error","_useState","useState","_useState2","_slicedToArray","setElemToLoad","_Fragment","Spinner","isEmptyObject","maxItems","isElementToLoad","prevState","ErrorMessage","errorMessage"],"sourceRoot":""}